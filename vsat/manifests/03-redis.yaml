---
# Source: redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: vsat-redis
  namespace: "platform"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.0
    app.kubernetes.io/instance: vsat-redis
    app.kubernetes.io/managed-by: Helm
---
# Source: redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: vsat-redis-configuration
  namespace: "platform"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.0
    app.kubernetes.io/instance: vsat-redis
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: vsat-redis-health
  namespace: "platform"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.0
    app.kubernetes.io/instance: vsat-redis
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_TLS_PORT \
        --tls \
        --cacert /opt/bitnami/redis/certs/ca.crt \
          --cert /opt/bitnami/redis/certs/tls.crt \
          --key /opt/bitnami/redis/certs/tls.key \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_TLS_PORT \
        --tls \
        --cacert /opt/bitnami/redis/certs/ca.crt \
          --cert /opt/bitnami/redis/certs/tls.crt \
          --key /opt/bitnami/redis/certs/tls.key \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        --tls \
        --cacert /opt/bitnami/redis/certs/ca.crt \
          --cert /opt/bitnami/redis/certs/tls.crt \
          --key /opt/bitnami/redis/certs/tls.key \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        --tls \
        --cacert /opt/bitnami/redis/certs/ca.crt \
          --cert /opt/bitnami/redis/certs/tls.crt \
          --key /opt/bitnami/redis/certs/tls.key \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: vsat-redis-scripts
  namespace: "platform"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.0
    app.kubernetes.io/instance: vsat-redis
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "0")
    ARGS+=("--tls-port" "${REDIS_TLS_PORT}")
    ARGS+=("--tls-cert-file" "${REDIS_TLS_CERT_FILE}")
    ARGS+=("--tls-key-file" "${REDIS_TLS_KEY_FILE}")
    ARGS+=("--tls-ca-cert-file" "${REDIS_TLS_CA_FILE}")
    ARGS+=("--tls-auth-clients" "${REDIS_TLS_AUTH_CLIENTS}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: vsat-redis-headless
  namespace: "platform"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.0
    app.kubernetes.io/instance: vsat-redis
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: vsat-redis
---
# Source: redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vsat-redis-master
  namespace: "platform"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.0
    app.kubernetes.io/instance: vsat-redis
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: vsat-redis
    app.kubernetes.io/component: master
---
# Source: redis/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vsat-redis-master-2
  namespace: "platform"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.0
    app.kubernetes.io/instance: vsat-redis
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: vsat-redis
      app.kubernetes.io/component: master
  serviceName: vsat-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-15.6.0
        app.kubernetes.io/instance: vsat-redis
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
        vsatApp: vsat-redis-master
      annotations:
        checksum/configmap: f613fe0a8c31bdeeb64b8e05b28caf0672e8085ee37bdcb31bfcfa653794da00
        checksum/health: a8490c55d40f06d60ca05c707f48dbfa3f8be1b8507c943c8872381e87eb87c8
        checksum/scripts: 79570362e9b0dcf6826eebb15abca00ec7570b4a17b4a1bd456a50cd8650e83f
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: vsat-redis
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: vsat-redis
                    app.kubernetes.io/component: master
                namespaces:
                  - "platform"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
      terminationGracePeriodSeconds: 30
      imagePullSecrets:
        - name: jfrogcred
      containers:
        - name: redis
          image: rimo.jfrog.io/docker/venafi-vsatellite/redis@sha256:c84b2ae0f75440be3b06332303261ccdb42b8fe515aa5319b768730eeb0cc005
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "yes"
            - name: REDIS_TLS_PORT
              value: "6379"
            - name:  REDIS_TLS_AUTH_CLIENTS
              value: "yes"
            - name:  REDIS_TLS_CERT_FILE
              value: /opt/bitnami/redis/certs/tls.crt
            - name:  REDIS_TLS_KEY_FILE
              value: /opt/bitnami/redis/certs/tls.key
            - name:  REDIS_TLS_CA_FILE
              value: /opt/bitnami/redis/certs/ca.crt
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
            - name: redis-certificates
              mountPath: /opt/bitnami/redis/certs
              readOnly: true
      volumes:
        - name: start-scripts
          configMap:
            name: vsat-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: vsat-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: vsat-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: redis-certificates
          secret:
            secretName: redis-master-tls
            defaultMode: 256
        - name: redis-data
          emptyDir: {}
---
# Source: certs/templates/certificates.yaml
# Redis
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: vsat-redis-master
  namespace: "platform"
  labels:
    app.kubernetes.io/name: certs
    app.kubernetes.io/instance: vsat-redis
spec:
  secretName: redis-master-tls
  duration: 8760h
  renewBefore: 360h # 15d
  issuerRef:
    name: vsat-certs-ca
    kind: ClusterIssuer
    group: "cert-manager.io"
  usages:
    - digital signature
    - key encipherment
    - server auth
    - client auth
  dnsNames:
    - vsat-redis-master
    - vsat-redis-master.platform
    - vsat-redis-master.platform.svc
    - vsat-redis-master.platform.svc.cluster.local
---
# Source: redis-networkPolicy/templates/redisIngressNetworkPolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: "redis-ingress"
spec:
  podSelector:
    matchLabels:
      vsatApp: "vsat-redis-master"
  ingress:
    - from:
      - namespaceSelector: {}
        podSelector:
          matchLabels:
            vsatRedisIngress: "true"
