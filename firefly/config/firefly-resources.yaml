---
# Source: firefly/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: firefly
  labels:
    helm.sh/chart: firefly-v0.1.0-alpha
    app.kubernetes.io/name: firefly
    app.kubernetes.io/instance: venafi-firefly
    app.kubernetes.io/version: "v0.1.0-alpha"
    app.kubernetes.io/managed-by: Helm
---
# Source: firefly/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: issuers.firefly.venafi.com
  labels:
    helm.sh/chart: firefly-v0.1.0-alpha
    app.kubernetes.io/name: firefly
    app.kubernetes.io/instance: venafi-firefly
    app.kubernetes.io/version: "v0.1.0-alpha"
    app.kubernetes.io/managed-by: Helm
spec:
  group: "firefly.venafi.com"
  names:
    kind: Issuer
    plural: issuers
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties: null
---
# Source: firefly/templates/crds.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: firefly:approver-firefly-venafi-com
  labels:
    helm.sh/chart: firefly-v0.1.0-alpha
    app.kubernetes.io/name: firefly
    app.kubernetes.io/instance: venafi-firefly
    app.kubernetes.io/version: "v0.1.0-alpha"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - "cert-manager.io"
    resources:
      - signers
    verbs:
      - approve
    resourceNames:
      - "issuers.firefly.venafi.com/*"
---
# Source: firefly/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: firefly
  labels:
    helm.sh/chart: firefly-v0.1.0-alpha
    app.kubernetes.io/name: firefly
    app.kubernetes.io/instance: venafi-firefly
    app.kubernetes.io/version: "v0.1.0-alpha"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificaterequests"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificaterequests/status"]
    verbs: ["update"]
---
# Source: firefly/templates/crds.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: firefly:approver-firefly-venafi-com
  labels:
    helm.sh/chart: firefly-v0.1.0-alpha
    app.kubernetes.io/name: firefly
    app.kubernetes.io/instance: venafi-firefly
    app.kubernetes.io/version: "v0.1.0-alpha"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: firefly:approver-firefly-venafi-com
subjects:
-
  kind: ServiceAccount
  name: cert-manager
  namespace: cert-manager
---
# Source: firefly/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: firefly
  labels:
    helm.sh/chart: firefly-v0.1.0-alpha
    app.kubernetes.io/name: firefly
    app.kubernetes.io/instance: venafi-firefly
    app.kubernetes.io/version: "v0.1.0-alpha"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: firefly
  namespace: cert-manager
roleRef:
  kind: ClusterRole
  name: firefly
  apiGroup: rbac.authorization.k8s.io
---
# Source: firefly/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: firefly:leader-election
  labels:
    helm.sh/chart: firefly-v0.1.0-alpha
    app.kubernetes.io/name: firefly
    app.kubernetes.io/instance: venafi-firefly
    app.kubernetes.io/version: "v0.1.0-alpha"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "watch", "list", "update", "create"]
---
# Source: firefly/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: firefly:leader-election
  labels:
    helm.sh/chart: firefly-v0.1.0-alpha
    app.kubernetes.io/name: firefly
    app.kubernetes.io/instance: venafi-firefly
    app.kubernetes.io/version: "v0.1.0-alpha"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: firefly
  namespace: cert-manager
roleRef:
  kind: Role
  name: firefly:leader-election
  apiGroup: rbac.authorization.k8s.io
---
# Source: firefly/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: venafi-firefly
  labels:
    helm.sh/chart: firefly-v0.1.0-alpha
    app.kubernetes.io/name: firefly
    app.kubernetes.io/instance: venafi-firefly
    app.kubernetes.io/version: "v0.1.0-alpha"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: firefly
      app.kubernetes.io/instance: venafi-firefly
  template:
    metadata:
      labels:
        app.kubernetes.io/name: firefly
        app.kubernetes.io/instance: venafi-firefly
    spec:
      serviceAccountName: 'firefly'
      containers:
      - name: firefly
        securityContext:
            capabilities:
              add:
              - IPC_LOCK
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
        #image: "public.ecr.aws/f6l7m9e9/firefly@sha256:a02b91f5e1fc0b066c0efead695d795308b218312ae2197a148abb7bd619a3c5"
        image: "public.ecr.aws/venafi-images/firefly:latest"
        imagePullPolicy: IfNotPresent
        command:
        - "firefly"
        - "run"
        - "--disable-mlock=false"
        - "--log-level=2"
        - "--config=/etc/firefly/config.yaml"
        env:
        - name: ACCEPT_TERMS
          value: "Y"
        readinessProbe:
          httpGet:
            port: 8080
            path: /readyz
        resources:
            {}
        volumeMounts:
        - name: firefly-config
          mountPath: /etc/firefly
          readOnly: true
        - name: firefly-secrets
          mountPath: /var/run/secrets/firefly.venafi.com
          readOnly: true
      volumes:
      - name: firefly-config
        configMap:
          name: firefly-config
      - name: firefly-secrets
        secret:
          secretName: firefly-secrets
          optional: true
