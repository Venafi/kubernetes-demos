image:
  # -- Target image repository.
  repository: ${JS_CONTAINER_REGISTRY}/jetstack-secure-enterprise/cert-manager-csi-driver
  # -- Target image version tag.
  tag: v0.4.0
  # -- Kubernetes imagePullPolicy on csi-driver.
  pullPolicy: IfNotPresent

imagePullSecrets:
  - name: venafi-jetstack-enterprise-key

nodeDriverRegistrarImage:
  # -- Target image repository.
  repository: ${JS_CONTAINER_REGISTRY}/jetstack-secure-enterprise/csi-node-driver-registrar
  # -- Target image version tag.
  tag: v2.6.2
  # -- Kubernetes imagePullPolicy on node-driver.
  pullPolicy: IfNotPresent

livenessProbeImage:
  # -- Target image repository.
  repository: ${JS_CONTAINER_REGISTRY}/jetstack-secure-enterprise/livenessprobe
  # -- Target image version tag.
  tag: v2.8.0
  # -- Kubernetes imagePullPolicy on liveness probe.
  pullPolicy: IfNotPresent

app:
  # -- Verbosity of cert-manager-csi-driver logging.
  logLevel: 1 # 1-5
  # -- Options for CSI driver
  driver:
    # -- Name of the driver which will be registered with Kubernetes.
    name: csi.cert-manager.io
    # -- If enabled, will use CSI token request for creating
    # CertificateRequests. CertificateRequests will be created via mounting
    # pod's service accounts.
    useTokenRequest: false
    # -- Configures the hostPath directory that the driver will write and mount volumes from.
    csiDataDir: /tmp/cert-manager-csi-driver
  # -- Options for the liveness container.
  livenessProbe:
    # -- The port that will expose the livness of the csi-driver
    port: 9809

resources: {}
  # -- Kubernetes pod resource limits for cert-manager-csi-driver
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # -- Kubernetes pod memory resource requests for cert-manager-csi-driver
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}
  # -- Kubernetes node selector: node labels for pod assignment
  # Allow scheduling of DaemonSet on linux nodes only
  # kubernetes.io/os: linux

tolerations: []
  # -- Kubernetes pod tolerations for cert-manager-csi-driver
  # Allow scheduling of DaemonSet on all nodes
  # - operator: "Exists"